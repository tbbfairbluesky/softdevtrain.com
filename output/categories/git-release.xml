<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development Training LLC (Posts about git release)</title><link>http://www.SoftDevTrain.com/</link><description></description><atom:link href="http://www.SoftDevTrain.com/categories/git-release.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:tbb@SoftDevTrain.com"&gt;Software Development Training LLC&lt;/a&gt; </copyright><lastBuildDate>Tue, 31 Jul 2018 21:03:32 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Creating a Release from a Bugfix Branch</title><link>http://www.SoftDevTrain.com/posts/creating-a-release-from-a-bugfix-branch.html</link><dc:creator>Software Development Training LLC</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-bugfix-branch.html#assumptions" id="id1"&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-bugfix-branch.html#steps" id="id2"&gt;Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="assumptions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-bugfix-branch.html#id1"&gt;Assumptions&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All changes to be included in the release have been made on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt; is a branch off of a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;release-branch&lt;/span&gt;&lt;/tt&gt; (e.g. &lt;tt class="docutils literal"&gt;release/v3.25.0&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="steps"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-bugfix-branch.html#id2"&gt;Steps&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Commit all your changes on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Check out the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;release-branch&lt;/span&gt;&lt;/tt&gt; (the branch that the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt; came off of in the first place).&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f4c7e9eff47141078bcc4d8527b3daba-1"&gt;&lt;/a&gt;$ git checkout release/v3.25.0
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create and checkout a &lt;em&gt;new&lt;/em&gt; branch which will contain the bugfix changes and the release. We'll
call this &lt;em&gt;new&lt;/em&gt; branch the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-release&lt;/span&gt;&lt;/tt&gt; branch.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d7d86b19b26848bf898eb072406a670e-1"&gt;&lt;/a&gt;$ git branch release/v3.25.1    &lt;span class="c1"&gt;# create the bugfix-release branch&lt;/span&gt;
&lt;a name="rest_code_d7d86b19b26848bf898eb072406a670e-2"&gt;&lt;/a&gt;$ git checkout release/v3.25.1  &lt;span class="c1"&gt;# checkout the bugfix-release branch&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Merge the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt; changes into the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-release&lt;/span&gt;&lt;/tt&gt; branch and squash the changes into one big change set.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d9710155c494433fa9529b428077cbb1-1"&gt;&lt;/a&gt;$ git merge --squash bugfix-branch
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fix up the &lt;tt class="docutils literal"&gt;version.txt&lt;/tt&gt; file&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8522c6a7dc6a495d8de33e8f1d7e9e55-1"&gt;&lt;/a&gt;$ git_current_branch &amp;gt; version.txt
&lt;a name="rest_code_8522c6a7dc6a495d8de33e8f1d7e9e55-2"&gt;&lt;/a&gt;$ git add version.txt
&lt;/pre&gt;&lt;p&gt;Note: &lt;tt class="docutils literal"&gt;git_current_branch&lt;/tt&gt; should be an alias defined as:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b07f4fef3ad944c38a043ca4a67283dd-1"&gt;&lt;/a&gt;$ alias git_current_branch='git symbolic-ref -q HEAD --short'
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Commit all changes to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-release&lt;/span&gt;&lt;/tt&gt; branch&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f20adf2a949a4f95b7df9915fb1e7e8a-1"&gt;&lt;/a&gt;$ git commit -m "Big description of the bugfix changes"
&lt;/pre&gt;&lt;p&gt;Now all the changes from the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt; are in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-release&lt;/span&gt;&lt;/tt&gt; (e.g. release/v3.25.1) branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push everything to the origin (GitHub)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d482138c95084d7d8fc06d57a5eb1652-1"&gt;&lt;/a&gt;$ git push origin --all
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove the local &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt; whose changes you've now merged and committed to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-release&lt;/span&gt;&lt;/tt&gt; branch.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d13579e6b13b44cda1611de2f6f89848-1"&gt;&lt;/a&gt;$ git branch -D bugfix-branch
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove the remote &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-branch&lt;/span&gt;&lt;/tt&gt; from the origin repository (GitHub)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_98e69533b54d4ed6afb8488d3265d337-1"&gt;&lt;/a&gt;$ git push origin --delete bugfix-branch
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a tag in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugfix-release&lt;/span&gt;&lt;/tt&gt; branch&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-1"&gt;&lt;/a&gt;$ git checkout *&amp;lt;bugfix-release&amp;gt;*
&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-2"&gt;&lt;/a&gt;$ git checkout release/v3.25.1
&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-3"&gt;&lt;/a&gt;$ git_current_branch &amp;gt; version.txt
&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-4"&gt;&lt;/a&gt;$ git add version.txt
&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-5"&gt;&lt;/a&gt;$ git commit -m "Created v3.25.1"
&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-6"&gt;&lt;/a&gt;$ git tag -a v3.25.1 -m "Tagging v3.25.1"
&lt;a name="rest_code_1abe2cfe3c82478e94fc92c2d29241c5-7"&gt;&lt;/a&gt;$ git push --tags origin release/v3.25.1
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go to &lt;a class="reference external" href="https://github.com"&gt;https://github.com&lt;/a&gt;, log in, and create a release from the tag&lt;/p&gt;
&lt;p&gt;Releases --&amp;gt; Draft a new release --&amp;gt; Select tag&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Provide a Title and Description&lt;/li&gt;
&lt;li&gt;Publish the release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure you don't leave your local &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; repository with the release branch checked out.&lt;/p&gt;
&lt;p&gt;You do not want to make further changes to that branch.&lt;/p&gt;
&lt;p&gt;Also, you &lt;em&gt;most likely&lt;/em&gt; (but not always) want your bug fix to go into the master branch so that it gets included
in any future releases.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_c3d99416f30e42cba23e25e5c427c11d-1"&gt;&lt;/a&gt;$ git checkout master
&lt;a name="rest_code_c3d99416f30e42cba23e25e5c427c11d-2"&gt;&lt;/a&gt;$ git merge release/v3.25.1 &lt;span class="c1"&gt;# substitute your bugfix release&lt;/span&gt;
&lt;a name="rest_code_c3d99416f30e42cba23e25e5c427c11d-3"&gt;&lt;/a&gt;$ git_current_branch &amp;gt; version.txt
&lt;a name="rest_code_c3d99416f30e42cba23e25e5c427c11d-4"&gt;&lt;/a&gt;$ git add version.txt
&lt;a name="rest_code_c3d99416f30e42cba23e25e5c427c11d-5"&gt;&lt;/a&gt;$ git commit -m &lt;span class="s2"&gt;"Updated version.txt"&lt;/span&gt;
&lt;a name="rest_code_c3d99416f30e42cba23e25e5c427c11d-6"&gt;&lt;/a&gt;$ git push origin --all
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;As always, further feature changes should go in a feature branch (off of &lt;tt class="docutils literal"&gt;master&lt;/tt&gt;) and further bugfix changes should
go in a bugfix branch (off of the release for which the bugs are being fixed).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git</category><category>git release</category><guid>http://www.SoftDevTrain.com/posts/creating-a-release-from-a-bugfix-branch.html</guid><pubDate>Wed, 14 Mar 2018 21:04:00 GMT</pubDate></item><item><title>Creating a Release from a Feature Branch</title><link>http://www.SoftDevTrain.com/posts/creating-a-release-from-a-feature-branch.html</link><dc:creator>Software Development Training LLC</dc:creator><description>&lt;div&gt;&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title first"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-feature-branch.html#assumptions" id="id1"&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-feature-branch.html#steps" id="id2"&gt;Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="assumptions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-feature-branch.html#id1"&gt;Assumptions&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All changes to be included in the release have been made on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;We release from the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch by merging &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; into the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;feature release&lt;/strong&gt; (e.g. X.Y.0) gets a branch of its own off of the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;div class="section" id="steps"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="http://www.SoftDevTrain.com/posts/creating-a-release-from-a-feature-branch.html#id2"&gt;Steps&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Commit all your changes on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Merge the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch into the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; and get all conflicts resolved.&lt;/p&gt;
&lt;p&gt;This is in case any changes were made in the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch since the point at which
the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; was branched off from the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bb12c411c2de4551b01644373f1db166-1"&gt;&lt;/a&gt;$ git checkout feature-branch
&lt;a name="rest_code_bb12c411c2de4551b01644373f1db166-2"&gt;&lt;/a&gt;$ git merge master
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Merge the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; into the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch and squash the changes into one big change set.&lt;/p&gt;
&lt;p&gt;This is to get the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; changes into the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; for use in the release and
to ensure that these changes are included in any subsequent feature change branches. (Since
feature change branches should be branches off of the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt;.) The squashing means that all the
changes for the current feature will be under one commit comment.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_305c047d67614159a5a2367f6604dd03-1"&gt;&lt;/a&gt;$ git checkout master
&lt;a name="rest_code_305c047d67614159a5a2367f6604dd03-2"&gt;&lt;/a&gt;$ git merge --squash feature-branch
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fix up the &lt;tt class="docutils literal"&gt;version.txt&lt;/tt&gt; file -- make it say &lt;tt class="docutils literal"&gt;master&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e6e7fcc83efa4cf591a64f6987412203-1"&gt;&lt;/a&gt;$ git_current_branch &amp;gt; version.txt
&lt;a name="rest_code_e6e7fcc83efa4cf591a64f6987412203-2"&gt;&lt;/a&gt;$ get add version.txt
&lt;/pre&gt;&lt;p&gt;Note: &lt;tt class="docutils literal"&gt;git_current_branch&lt;/tt&gt; should be an alias defined as:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e6ed625456fd48be8111c3475b7bd74c-1"&gt;&lt;/a&gt;alias git_current_branch='git symbolic-ref -q HEAD --short'
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Commit all changes to the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch. This is the one commit for all of the
feature-related changes&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f86956e19bc44cbb905256d9943bdeaf-1"&gt;&lt;/a&gt;$ git commit -m "Big description of feature branch changes"
&lt;/pre&gt;&lt;p&gt;Now all the changes you made in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; are in the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push everything to the origin (GitHub)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1b0af826eb47423da3bfbc645105f141-1"&gt;&lt;/a&gt;$ git push origin --all
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove the local &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; whose changes you've now merged and committed to the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_fd2d7bfe448843ef8868afa5552807b4-1"&gt;&lt;/a&gt;$ git branch -D feature-branch
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Remove the remote &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;feature-branch&lt;/span&gt;&lt;/tt&gt; from the origin repository (GitHub)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5f90d933123045a5b03065343c5830c5-1"&gt;&lt;/a&gt;$ git push origin --delete feature-branch
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a release version in a release branch&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-1"&gt;&lt;/a&gt;$ git checkout master
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-2"&gt;&lt;/a&gt;$ git branch release/v1.7.0  &lt;span class="c1"&gt;# substitute your intended release number&lt;/span&gt;
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-3"&gt;&lt;/a&gt;$ git checkout release/v1.7.0
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-4"&gt;&lt;/a&gt;$ git_current_branch &amp;gt; version.txt
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-5"&gt;&lt;/a&gt;$ git add version.txt
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-6"&gt;&lt;/a&gt;$ git commit -m &lt;span class="s2"&gt;"Created v1.7.0"&lt;/span&gt;
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-7"&gt;&lt;/a&gt;$ git tag -a v1.7.0 -m &lt;span class="s2"&gt;"Tagging v1.7.0"&lt;/span&gt;
&lt;a name="rest_code_b8548df3a2cc468f9efa958cd1b27e89-8"&gt;&lt;/a&gt;$ git push --tags origin release/v1.7.0
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Go to &lt;a class="reference external" href="https://github.com"&gt;https://github.com&lt;/a&gt;, log in, and create a release from the tag&lt;/p&gt;
&lt;p&gt;Releases --&amp;gt; Draft a new release --&amp;gt; Select tag&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Provide a Title: e.g. "Multirun ICA+fIX on 7T Retinotopy Data"&lt;/li&gt;
&lt;li&gt;Provide a Description: e.g. "This release is intended to be used for running Multirun ICA+FIX processing on 7T Retinotopy data"&lt;/li&gt;
&lt;li&gt;Publish the release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure you don't leave your local &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; repository with the release branch checked out.&lt;/p&gt;
&lt;p&gt;You do not want to make further changes to that branch. If you are making a bugfix release (a final point release,
e.g. v1.7.1 or v1.7.2), you will create a feature/bugfix branch off of the release branch.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a96ab670933a4afeb81af37b1e9b474c-1"&gt;&lt;/a&gt;$ git checkout master
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure all the changes in the release branch are merged into the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch and the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt;
branch is ready to use as a starting point for future changes.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_06785330a4464040a7fb05f2b9bc4834-1"&gt;&lt;/a&gt;$ git merge release/v1.7.0 &lt;span class="c1"&gt;# substitute your release number&lt;/span&gt;
&lt;a name="rest_code_06785330a4464040a7fb05f2b9bc4834-2"&gt;&lt;/a&gt;$ git_current_branch &amp;gt; version.txt
&lt;a name="rest_code_06785330a4464040a7fb05f2b9bc4834-3"&gt;&lt;/a&gt;$ git add version.txt
&lt;a name="rest_code_06785330a4464040a7fb05f2b9bc4834-4"&gt;&lt;/a&gt;$ git commit -m &lt;span class="s2"&gt;"Updated version.txt"&lt;/span&gt;
&lt;a name="rest_code_06785330a4464040a7fb05f2b9bc4834-5"&gt;&lt;/a&gt;$ git push origin --all
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Further changes should be done in a new feature branch, not on the &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>git</category><category>git release</category><guid>http://www.SoftDevTrain.com/posts/creating-a-release-from-a-feature-branch.html</guid><pubDate>Wed, 14 Mar 2018 16:35:00 GMT</pubDate></item></channel></rss>